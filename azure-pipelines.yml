variables:
  ENV: dev
  PROJECT_NAME: cce
  REGION: us-east1

parameters:
- name: imageTag
  displayName: Docker Image Tag
  type: string
  default: '$(REGION)-docker.pkg.dev/prj-$(ENV)-$(PROJECT_NAME)-cni1/$(ENV)-gcr/$(ENV)-$(PROJECT_NAME)-nai-api:$(Build.BuildId)'
- name: kubernetesServiceConnection
  displayName: Docker Image Tag
  type: string
  default: 'gke-$(ENV)-$(PROJECT_NAME)-cluster'
- name: deploymentName
  displayName: Deployment Name
  type: string
  default: '$(ENV)-$(PROJECT_NAME)-nai-api-deployment'

stages:
  - stage: BuildAndPublish
    jobs:
      - job: BuildAndPublishJob
        displayName: Build and Publish
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'

          - task: DownloadSecureFile@1
            name: authkey
            displayName: 'Download Service Account Key'
            inputs:
              secureFile: '$(ENV)-google_credentials.json'
              retryCount: '2'

          - script: |
              wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
              tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --quiet --usage-reporting=false --path-update=true
              PATH="google-cloud-sdk/bin:${PATH}"
              gcloud --quiet components update
              gcloud auth activate-service-account --key-file=$(authkey.secureFilePath)
              gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://$REGION-docker.pkg.dev
              gcloud --quiet auth configure-docker $REGION-docker.pkg.dev
            displayName: 'Install gcloud SDK and Authenticate'

          - task: Docker@2
            inputs:
              command: 'build'
              dockerfile: '**/Dockerfile'
              buildContext: '$(Build.SourcesDirectory)'

          - script: |
              docker build \
                --tag "${{ parameters.imageTag }}" \
                --build-arg GITHUB_SHA="$(Build.SourceVersion)" \
                --build-arg GITHUB_REF="$(Build.SourceBranchName)" \
                .
            displayName: 'Build Docker Image'

          - script: |
              gcloud auth configure-docker $REGION-docker.pkg.dev
              docker push "${{ parameters.imageTag }}"
            displayName: 'Push Docker Image'

  - stage: Deploy
    dependsOn: BuildAndPublish
    jobs:
      - job: DeployJob
        displayName: Deploy
        pool:
          vmImage: 'ubuntu-latest'
        strategy:
          matrix:
            mg:
              STATE: 'EAD'
            # Add other states here
        steps:
          - checkout: self

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'

          - task: DownloadSecureFile@1
            name: authkey
            displayName: 'Download Service Account Key'
            inputs:
              secureFile: '$(ENV)-google_credentials.json'
              retryCount: '2'

          - script: |
              wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.tar.gz
              tar zxvf google-cloud-sdk.tar.gz && ./google-cloud-sdk/install.sh --quiet --usage-reporting=false --path-update=true
              PATH="google-cloud-sdk/bin:${PATH}"
              gcloud --quiet components update
              gcloud --quiet components install gke-gcloud-auth-plugin
              gcloud auth activate-service-account --key-file=$(authkey.secureFilePath)
              gcloud --quiet container clusters get-credentials gke-$(ENV)-$(PROJECT_NAME)-cluster  --zone $REGION --project prj-$(ENV)-$(PROJECT_NAME)-cni1
              export USE_GKE_GCLOUD_AUTH_PLUGIN=True
            displayName: 'Install gcloud SDK and Authenticate'

          - task: Kubernetes@0
            displayName: 'Scale down deployment'
            inputs:
              kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
              namespace: '$(ENV)-$(PROJECT_NAME)'
              command: 'scale'
              arguments: '--replicas=0 deployment/${{ parameters.deploymentName }}'
            continueOnError: true

          - task: Kubernetes@0
            displayName: 'kubectl set image'
            inputs:
              kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
              namespace: '$(ENV)-$(PROJECT_NAME)'
              command: 'set'
              arguments: 'image deployment/${{ parameters.deploymentName }} primary=${{ parameters.imageTag }}'

          - task: Kubernetes@0
            displayName: 'Scale up deployment'
            inputs:
              kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
              namespace: '$(ENV)-$(PROJECT_NAME)'
              command: 'scale'
              arguments: '--replicas=1 deployment/${{ parameters.deploymentName }}'

          - task: Kubernetes@0
            displayName: 'Check rollout status'
            inputs:
              kubernetesServiceConnection: '${{ parameters.kubernetesServiceConnection }}'
              namespace: '$(ENV)-$(PROJECT_NAME)'
              command: 'rollout'
              arguments: 'status deployment/${{ parameters.deploymentName }}'
